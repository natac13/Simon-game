'use strict';

var game = {
    init: function init() {
        this.cacheDOM();
        this.actions();
    },

    generateSequence: function generateSequence() {
        for (var i = 0; i < 20; i++) {
            this.sequence.push(this.random());
        }
        console.log(this.sequence);
    },

    play: function play() {
        this.sequence = [];
        this.min = 1;
        this.max = 4;
        this.counter = 5; // increase this each time
        this.round = 0;
        this.generateSequence();
        this.sim(this.round);
    },

    random: function random() {
        return Math.floor(Math.random() * (this.max - this.min + 1)) + this.min;
    },

    cacheDOM: function cacheDOM() {
        this.$board = $('#game-board');
        this.$audio1 = this.$board.find('#audio1');
        this.$audio2 = this.$board.find('#audio2');
        this.$audio3 = this.$board.find('#audio3');
        this.$audio4 = this.$board.find('#audio4');
        this.$start = this.$board.find('#start');
        this.$restart = this.$board.find('#restart');
    },

    actions: function actions() {
        this.$start.on('click', this.play.bind(game));
        this.$board.on('mousedown', 'input', this.sound.bind(game));
    },

    sound: function sound(event) {
        // console.log(this.id.slice(-1);
        var num = $(event.target).attr('id').slice(-1);
        this['$audio' + num].trigger('play');
        this.counter += 2;
        console.log(this.counter);
        this.sim(0);
    },

    sim: function sim(i) {
        var _this = this;

        if (this.sequence[i] && this.counter > 0) {
            this['$audio' + this.sequence[i]].trigger('play');
            this.counter--; // will stop the sim each round
            setTimeout(function () {
                _this.sim(i + 1);
            }, 1000);
        }
    }

};

$(document).ready(function () {

    game.init();
});
//# sourceMappingURL=main.min.js.map
