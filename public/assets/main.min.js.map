{"version":3,"sources":["main.js","functional-example.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","appState","isAiPlaying","soundSequence","userSequence","gameSpeed","round","$board","$","random","min","max","Math","floor","playSound","soundId","console","log","find","trigger","playSequence","state","forEach","index","setTimeout","start","x","concat","tmp","test","slice","join","listen","on","event","push","attr"],"mappings":"AAAA,YAEA,IAAIA,UAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,GAAIC,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,GAAIG,GAASF,UAAUD,EAAI,KAAK,GAAII,KAAOD,GAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,MAAOL,KCFvP,WACI,GAAIS,IACAC,aAAa,EACbC,iBACAC,gBACAC,UAAW,IACXC,MAAO,GAEPC,EAASC,EAAE,eAuBTC,EAAS,SAACC,EAAKC,GDKjB,MCLyBC,MAAKD,IAAID,EAAKE,KAAKC,MAAMD,KAAKH,UAAYE,EAAM,MAYvEG,EAAY,SAACC,GACfC,QAAQC,IAAI,WAAaF,GAEzBR,EAAOW,KAAI,SAAUH,GAAWI,QAAQ,SAGtCC,EAAe,SAACC,GAClBA,EAAMlB,cAAcmB,QAAQ,SAACP,EAASQ,GAC/BA,EAAQF,EAAMf,OACbkB,WAAW,WDiBP,MCjBaV,GAAUC,IAAWM,EAAMhB,UAAYkB,KAGhEP,QAAQC,IAAII,EAAMlB,gBAGhBsB,EAAQ,SAACJ,GAEX,GAAIK,GAAIL,EAAMlB,cAAcwB,QAAQlB,EAAO,EAAG,KAC1CmB,EAAGvC,YAAQgC,GAAOlB,cAAeuB,GAGrC,OADAN,GAAaQ,GACNA,GAILC,EAAO,SAACR,GACV,MAAIA,GAAMlB,cAAc2B,MAAM,EAAGT,EAAMjB,cAAc2B,KAAK,MAAQV,EAAMjB,aAAa2B,KAAK,KAC/E,EACCV,EAAMlB,cAAcR,SAAW0B,EAAMjB,aAAaT,QAC1D0B,EAAMf,OAAS,EACfe,EAAMjB,gBACNH,EAAWwB,EAAMJ,IACV,GAJJ,QAQLW,EAAS,QAATA,KAEFzB,EAAO0B,GAAG,QAAS,UAAW,SAASC,GAGnCjC,EAASG,aAAa+B,KAAM3B,EAAE0B,EAAM1C,QAAQ4C,KAAK,MAAMN,MAAM,KAC1DD,EAAK5B,IACJ+B,MAMZzB,GAAOW,KAAK,UAAUe,GAAG,QAAS,WAC9BhC,EAAWwB,EAAMxB,GACjB+B","file":"main.min.js","sourcesContent":["","(function () {\n    let appState = {\n        isAiPlaying: false, // Whether the \"AI\" is playing the sequence\n        soundSequence: [], // The list of sound IDs to play in order\n        userSequence: [], // The list of sound IDs the user has triggered\n        gameSpeed: 1000,  // the tempo of setInterval\n        round: 1 //  round or how many sounds to play\n    };\n    let $board = $('#game-board');\n\n    // const cacheDOM = () => {\n    //     let $board   = $('#game-board');\n    //     let $audio1  = $board.find('#audio1');\n    //     let $audio2  = $board.find('#audio2');\n    //     let $audio3  = $board.find('#audio3');\n    //     let $audio4  = $board.find('#audio4');\n    //     let $start   = $board.find('#start');\n    //     let $restart = $board.find('#restart');\n\n    // };\n    //\n\n    const range = (start, end) => {\n        let list = [];\n        for (let i = start; i < end + 1; i++) {\n            list.push(i);\n        }\n\n        return list;\n    };\n\n    const random = (min, max) => Math.max(min, Math.floor(Math.random() * (max + 1)));\n\n    const generateRandomSequence = () => range(1, 20).map(() => random(1, 4));\n\n    /*** Reducers ***/\n\n    const generateSequence = (state) => ({...state, soundSequence: generateRandomSequence()});\n    const startAiPlaying = (state) => ({...state, isAiPlaying: true});\n    const stopAiPlaying = (state) => ({...state, isAiPlaying: false});\n\n    /*** Side effects ***/\n\n    const playSound = (soundId) => {\n        console.log('playing ' + soundId);\n        //$(`[data-sound-id=\"${soundId}\"]`).trigger('play');\n        $board.find(`#audio${soundId}`).trigger('play');\n    };\n\n    const playSequence = (state) => {\n        state.soundSequence.forEach((soundId, index) => {\n            if(index < state.round) {\n                setTimeout(() => playSound(soundId), (state.gameSpeed * index));\n            }\n        });\n        console.log(state.soundSequence);\n    };\n\n    const start = (state) => {\n\n        let x = state.soundSequence.concat([random(1, 4)]);\n        let tmp = ({...state, soundSequence: x});\n        // let tmp = appState.round === 1 ? generateSequence(appState) : state;\n        playSequence(tmp);\n        return tmp;\n\n    };\n\n    const test = (state) => {\n        if (state.soundSequence.slice(0, state.userSequence).join('') !== state.userSequence.join('')) {\n            return false;\n        } else if ( state.soundSequence.length === state.userSequence.length) {\n            state.round += 1;\n            state.userSequence = [];\n            appState = start(state);\n            return true;\n        }\n    };\n\n    const listen = () => {\n        // let tmp;\n        $board.on('click', '.square', function(event) {\n            // let x = state.userSequence.concat([($(event.target).attr('id').slice(-1))]);\n            // tmp = {...state, userSequence: x};\n            appState.userSequence.push(($(event.target).attr('id').slice(-1)));\n            if(test(appState)) {\n                listen();\n            }\n\n        });\n    };\n\n    $board.find('#start').on('click', () => {\n        appState = start(appState);\n        listen();\n    });\n    // listen();\n\n    // appState = generateSequence(appState);\n    // playSequence(appState.soundSequence);\n})();\n"],"sourceRoot":"/source/"}