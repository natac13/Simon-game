{"version":3,"sources":["main.js","functional-example.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","appState","isAiPlaying","soundSequence","userSequence","gameSpeed","round","$board","$","random","min","max","Math","floor","highlight","soundId","find","addClass","setTimeout","removeClass","playSound","console","log","trigger","playSequence","state","multiplier","seq","forEach","index","start","x","concat","tmp","test","slice","join","reset","on","event","num","attr","push"],"mappings":"AAAA,YAEA,IAAIA,UAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,GAAIC,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,GAAIG,GAASF,UAAUD,EAAI,KAAK,GAAII,KAAOD,GAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,MAAOL,KCFvP,WACI,GAAIS,IACAC,aAAa,EACbC,iBACAC,gBACAC,UAAW,KACXC,MAAO,GAEPC,EAASC,EAAE,eAuBTC,EAAS,SAACC,EAAKC,GDKjB,MCLyBC,MAAKD,IAAID,EAAKE,KAAKC,MAAMD,KAAKH,UAAYE,EAAM,MAevEG,EAAY,SAACC,GACfR,EAAOS,KAAI,OAAQD,GAAWE,SAAS,UACvCC,WAAW,WACPX,EAAOS,KAAI,OAAQD,GAAWI,YAAY,WAC3C,MAGDC,EAAY,SAACL,GACfM,QAAQC,IAAI,WAAaP,GAEzBD,EAAUC,GACVR,EAAOS,KAAI,SAAUD,GAAWQ,QAAQ,SAGtCC,EAAe,SAACC,GAClB,GAAIC,GAAa,EACbC,EAAMF,EAAMtB,aACbwB,GAAIhC,OAAS,IACZ+B,EAAa,KAEdC,EAAIhC,OAAS,IACZ+B,EAAa,GAEdC,EAAIhC,OAAS,IACZ+B,EAAa,KAEjBL,QAAQC,IAAII,GACZC,EAAIC,QAAQ,SAACb,EAASc,GACfA,EAAQJ,EAAMnB,OACbY,WAAW,WDiBP,MCjBaE,GAAUL,IAAWU,EAAOpB,UAAYwB,EAASH,MAKxEI,EAAQ,SAACL,GAEX,GAAIM,GAAIN,EAAMtB,cAAc6B,QAAQvB,EAAO,EAAG,IAC9CY,SAAQC,IAAIS,EACZ,IAAIE,GAAG5C,YAAQoC,GAAOtB,cAAe4B,GAGrC,OADAP,GAAaS,GACNA,GAILC,EAAO,SAACT,GAGV,MAFAJ,SAAQC,IAAI,SAAWG,EAAMtB,eAC7BkB,QAAQC,IAAI,QAASG,EAAMrB,cACvBqB,EAAMtB,cAAcgC,MAAM,EAAGV,EAAMrB,aAAaT,QAAQyC,KAAK,KAAOX,EAAMrB,aAAagC,KAAK,KAC5Ff,QAAQC,IAAI,SACZrB,EAAWoC,EAAMZ,IACV,GACCA,EAAMtB,cAAcR,SAAW8B,EAAMrB,aAAaT,QAC1D0B,QAAQC,IAAI,SACZG,EAAMnB,OAAS,EACfmB,EAAMrB,gBACNc,WAAW,WACPjB,EAAW6B,EAAML,IAClB,MAEI,GARJ,QAYLY,EAAQ,SAACZ,GACX,MAAApC,aACOoC,GACHtB,iBACAC,gBACAE,MAAO,IAefC,GAAOS,KAAK,UAAUsB,GAAG,QAAS,WAC9BrC,EAAW6B,EAAM7B,KAIrBM,EAAOS,KAAK,YAAYsB,GAAG,QAAS,WAChCrC,EAAWoC,EAAMpC,KAGrBM,EAAO+B,GAAG,QAAS,UAAW,SAASC,GAG/B,GAAIC,GAAMhC,EAAE+B,EAAM/C,QAAQiD,KAAK,MAAMN,MAAM,GAC3Cf,GAAUoB,GACVvC,EAASG,aAAasC,KAAKF,GAC3BN,EAAKjC","file":"main.min.js","sourcesContent":["\n// import {range, random} from './functional-example';\n\n\n// let x = range(1, 4);\n// let y = random(1, 4);\n// console.log(x);\n// console.log(y);","(function() {\n    let appState = {\n        isAiPlaying: false, // Whether the \"AI\" is playing the sequence\n        soundSequence: [], // The list of sound IDs to play in order\n        userSequence: [], // The list of sound IDs the user has triggered\n        gameSpeed: 1500,  // the tempo of setInterval\n        round: 1 //  round or how many sounds to play\n    };\n    let $board = $('#game-board');\n\n    // const cacheDOM = () => {\n    //     let $board   = $('#game-board');\n    //     let $audio1  = $board.find('#audio1');\n    //     let $audio2  = $board.find('#audio2');\n    //     let $audio3  = $board.find('#audio3');\n    //     let $audio4  = $board.find('#audio4');\n    //     let $start   = $board.find('#start');\n    //     let $restart = $board.find('#restart');\n\n    // };\n    //\n\n    const range = (start, end) => {\n        let list = [];\n        for (let i = start; i < end + 1; i++) {\n            list.push(i);\n        }\n\n        return list;\n    };\n\n    const random = (min, max) => Math.max(min, Math.floor(Math.random() * (max + 1)));\n    // return {\n    //     range,\n    //     random\n    // };\n    const generateRandomSequence = () => range(1, 20).map(() => random(1, 4));\n\n    /*** Reducers ***/\n\n    const generateSequence = (state) => ({...state, soundSequence: generateRandomSequence()});\n    const startAiPlaying = (state) => ({...state, isAiPlaying: true});\n    const stopAiPlaying = (state) => ({...state, isAiPlaying: false});\n\n    /*** Side effects ***/\n\n    const highlight = (soundId) => {\n        $board.find(`#btn${soundId}`).addClass('active');\n        setTimeout(() => {\n            $board.find(`#btn${soundId}`).removeClass('active');\n        }, 400);\n    };\n\n    const playSound = (soundId) => {\n        console.log('playing ' + soundId);\n        //$(`[data-sound-id=\"${soundId}\"]`).trigger('play');\n        highlight(soundId);\n        $board.find(`#audio${soundId}`).trigger('play');\n    };\n\n    const playSequence = (state) => {\n        let multiplier = 1;\n        let seq = state.soundSequence;\n        if(seq.length > 2) {\n            multiplier = 1.5;\n        }\n        if(seq.length > 3) {\n            multiplier = 2;\n        }\n        if(seq.length > 4) {\n            multiplier = 2.7;\n        }\n        console.log(multiplier);\n        seq.forEach((soundId, index) => {\n            if(index < state.round) {\n                setTimeout(() => playSound(soundId), ((state.gameSpeed * index) / multiplier));\n            }\n        });\n    };\n\n    const start = (state) => {\n\n        let x = state.soundSequence.concat([random(1, 4)]);\n        console.log(x);\n        let tmp = ({...state, soundSequence: x});\n        // let tmp = appState.round === 1 ? generateSequence(appState) : state;\n        playSequence(tmp);\n        return tmp;\n\n    };\n\n    const test = (state) => {\n        console.log('sound ' + state.soundSequence);\n        console.log('user ' +state.userSequence);\n        if (state.soundSequence.slice(0, state.userSequence.length).join('') != state.userSequence.join('')) {\n            console.log('here1');\n            appState = reset(state); // reset the state on fail\n            return false;\n        } else if ( state.soundSequence.length === state.userSequence.length) {\n            console.log('here2');\n            state.round += 1;\n            state.userSequence = [];\n            setTimeout(() => {\n                appState = start(state);\n            }, 1000);\n\n            return true;\n        }\n    };\n\n    const reset = (state) => {\n        return {\n            ...state,\n            soundSequence: [],\n            userSequence: [],\n            round: 1\n        };\n    };\n\n    // const listen = () => {\n        // let tmp;\n    //     $board.on('mouseup', '.square', function(event) {\n    //         // let x = state.userSequence.concat([($(event.target).attr('id').slice(-1))]);\n    //         // tmp = {...state, userSequence: x};\n    //         appState.userSequence.push(($(event.target).attr('id').slice(-1)));\n    //         test(appState);\n\n    //     });\n    // };\n\n    $board.find('#start').on('click', () => {\n        appState = start(appState);\n        // listen();\n\n    });\n    $board.find('#restart').on('click', () => {\n        appState = reset(appState);\n    });\n    // listen();\n    $board.on('click', '.square', function(event) {\n            // let x = state.userSequence.concat([($(event.target).attr('id').slice(-1))]);\n            // tmp = {...state, userSequence: x};\n            let num = $(event.target).attr('id').slice(-1);\n            playSound(num);\n            appState.userSequence.push(num);\n            test(appState);\n\n        });\n\n    // appState = generateSequence(appState);\n    // playSequence(appState.soundSequence);\n\n\n    // export {range, random, generateRandomSequence};\n})();\n\n"],"sourceRoot":"/source/"}